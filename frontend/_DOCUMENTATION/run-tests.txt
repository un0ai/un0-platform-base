# Running Tests in the Frontend Application

## Test Structure

The tests are organized in the following categories under `src/__tests__/`:

1. Authentication Tests (`auth/`)
   - auth.test.tsx: Core authentication functionality
   - auth-flow.test.tsx: End-to-end authentication flows

2. Component Tests (`components/`)
   - navigation.test.tsx: Navigation components
   - team-switcher.test.tsx: Team switching functionality
   - nav-projects.test.tsx: Project navigation
   - ui.test.tsx: UI components

3. Integration Tests (`integration/`)
   - protected-routes.test.tsx: Protected routes functionality
   - auth-flow.test.tsx: Authentication flow integration

4. Routing Tests (`routing/`)
   - protected-routes.test.tsx: Protected routes routing

## Running Tests

1. Run All Tests:
   ```bash
   npm test
   ```

2. Run Tests in Watch Mode (development):
   ```bash
   npm test -- --watch
   ```

3. Run a Specific Test File:
   ```bash
   npm test -- auth.test.tsx
   ```

4. Run Tests with Coverage Report:
   ```bash
   npm test -- --coverage
   ```

5. Run Tests by Pattern:
   ```bash
   # Run all component tests
   npm test -- components/
   # Run all integration tests
   npm test -- integration/
   ```

6. Run Tests in CI Mode (single run):
   ```bash
   npm test -- --ci
   ```

## Test Configuration

- Test Runner: Jest
- Component Testing: React Testing Library
- Configuration Files:
  - jest.config.js: Jest configuration
  - babel.config.js: Babel configuration
  - src/test/setup.ts: Test setup file

## Common Issues and Solutions

1. Import Attributes Error:
   If you encounter errors related to import attributes, ensure you have
   @babel/plugin-syntax-import-attributes installed and configured in babel.config.js:
   ```javascript
   module.exports = {
     presets: [
       ['@babel/preset-env', { targets: { node: 'current' } }],
       '@babel/preset-typescript',
       ['@babel/preset-react', { runtime: 'automatic' }],
     ],
     plugins: ['@babel/plugin-syntax-import-attributes'],
   };
   ```

2. Test Environment Issues:
   - Make sure all required dependencies are installed
   - Check that test setup files are properly configured
   - Verify that environment variables are set correctly

## Writing New Tests

1. Place new test files in the appropriate directory under `src/__tests__/`
2. Follow the naming convention: `*.test.tsx` for component tests
3. Use React Testing Library for component testing
4. Mock external dependencies and API calls
5. Test both success and error scenarios

## Current Test Coverage

- Total Test Suites: 8
- Total Tests: 53
- Coverage Areas:
  - Component rendering
  - User interactions
  - Authentication flows
  - Protected routes
  - Navigation
  - UI state management
